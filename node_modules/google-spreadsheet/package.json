{
  "author": {
    "name": "Theo Ephraim",
    "email": "theozero@gmail.com",
    "url": "http://theoephraim.com"
  },
  "name": "google-spreadsheet",
  "description": "Google Spreadsheet Data API -- simple interface to read/write rows + cells",
  "version": "1.0.1",
  "keywords": [
    "google",
    "spreadsheet",
    "spreadsheets",
    "gdata",
    "api"
  ],
  "homepage": "https://github.com/theoephraim/node-google-spreadsheet",
  "repository": {
    "type": "git",
    "url": "git://github.com/theoephraim/node-google-spreadsheet.git"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "async": "^1.3.0",
    "google-auth-library": "^0.9.6",
    "lodash": "^3.7.0",
    "request": "~2.29.0",
    "xml2js": "~0.4.0"
  },
  "devDependencies": {
    "nodeunit": "~0.8.2",
    "async": "~0.2.9"
  },
  "scripts": {
    "test": "node_modules/.bin/nodeunit test/spreadsheet_test.js"
  },
  "readme": "# Simple Google Spreadsheet Access (node.js)\n\n[![NPM version](https://badge.fury.io/js/google-spreadsheet.png)](http://badge.fury.io/js/google-spreadsheet)\n\nA simple Node.js library to read and manipulate data in Google Spreadsheets.\n\nWorks without authentication for read-only sheets or with auth for adding/editing/deleting data.\nSupports both list-based and cell-based feeds.\n\n## Installation\n\n[![NPM Info](https://nodei.co/npm/google-spreadsheet.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.org/package/google-spreadsheet)\n\n## Basic Usage\n\n``` javascript\nvar GoogleSpreadsheet = require(\"google-spreadsheet\");\n\n// spreadsheet key is the long id in the sheets URL\nvar my_sheet = new GoogleSpreadsheet('<spreadsheet key>');\n\n// Without auth -- read only\n// IMPORTANT: See note below on how to make a sheet public-readable!\n// # is worksheet id - IDs start at 1\nmy_sheet.getRows( 1, function(err, row_data){\n\tconsole.log( 'pulled in '+row_data.length + ' rows');\n});\n\n// With auth -- read + write\n// see below for authentication instructions\nvar creds = require('./google-generated-creds.json');\n// OR, if you cannot save the file locally (like on heroku)\nvar creds = {\n  client_email: 'yourserviceaccountemailhere@google.com',\n  private_key: 'your long private key stuff here'\n}\n\nmy_sheet.useServiceAccountAuth(creds, function(err){\n\t// getInfo returns info about the sheet and an array or \"worksheet\" objects\n\tmy_sheet.getInfo( function( err, sheet_info ){\n\t\tconsole.log( sheet_info.title + ' is loaded' );\n\t\t// use worksheet object if you want to stop using the # in your calls\n\n\t\tvar sheet1 = sheet_info.worksheets[0];\n\t\tsheet1.getRows( function( err, rows ){\n\t\t\trows[0].colname = 'new val';\n\t\t\trows[0].save();\t//async and takes a callback\n\t\t\trows[0].del();  //async and takes a callback\n\t\t});\n\t});\n\n\t// column names are set by google and are based\n  // on the header row (first row) of your sheet\n\tmy_sheet.addRow( 2, { colname: 'col value'} );\n\n\tmy_sheet.getRows( 2, {\n\t\tstart: 100,\t\t\t // start index\n\t\tnum: 100,\t\t\t   // number of rows to pull\n\t\torderby: 'name'  // column to order results by\n\t}, function(err, row_data){\n\t\t// do something...\n\t});\n})\n```\n\n## Authentication\n\nIMPORTANT: Google recently deprecated their ClientLogin (username+password)\naccess, so things are slightly more complicated now. Older versions of this\nmodule supported it, so just be aware that things changed.\n\n### Unauthenticated access (read-only access on public docs)\n\nBy default, this module makes unauthenticated requests and can therefore\nonly access spreadsheets that are \"public\".\n\nThe Google Spreadsheets Data API reference and developers guide is a little\nambiguous about how you access a \"published\" public Spreadsheet.\n\nIf you wish to work with a Google Spreadsheet without authenticating, not only\nmust the Spreadsheet in question be visible to the web, but it must also have\nbeen explicitly published using \"File > Publish to the web\" menu option in\nthe google spreadsheets GUI.\n\nMany seemingly \"public\" sheets have not also been \"published\" so this may\ncause some confusion.\n\n\n### Service Account (recommended method)\n\nThis is a 2-legged oauth method and designed to be \"an account that belongs to your application instead of to an individual end user\".\nUse this for an app that needs to access a set of documents that you have full access to.\n([read more](https://developers.google.com/identity/protocols/OAuth2ServiceAccount))\n\n__Setup Instructions__\n\n1. Go to the [Google Developers Console](https://console.developers.google.com/project)\n2. Select your project or create a new one (and then select it)\n3. Enable the Drive API for your project\n  - In the sidebar on the left, expand __APIs & auth__ > __APIs__\n  - Search for \"drive\"\n  - Click on \"Drive API\"\n  - click the blue \"Enable API\" button\n4. Create a service account for your project\n  - In the sidebar on the left, expand __APIs & auth__ > __Credentials__\n  - Click \"Create new Client ID\" button\n  - select the \"Service account\" option\n  - click \"Create Client ID\" button to continue\n  - when the dialog appears click \"Okay, got it\"\n  - your JSON key file is generated and downloaded to your machine (__it is the only copy!__)\n  - note your service account's email address (also available in the JSON key file)\n5. Share the doc (or docs) with your service account using the email noted above\n\n\n## API\n\n### `GoogleSpreadsheet`\n\nThe main class that represents an entire spreadsheet.\n\n\n#### `new GoogleSpreadsheet(sheet_id, [auth], [options])`\n\nCreate a new google spreadsheet object.\n\n- `sheet_id` -- the ID of the spreadsheet (from its URL)\n- `auth` - (optional) an existing auth token\n- `options` - (optional)\n  - `visibility` - defaults to `public` if anonymous\n  - `projection` - defaults to `values` if anonymous\n\n\n\n#### `GoogleSpreadsheet.useServiceAccountAuth(account_info, callback)`\n\nUses a service account email and public/private key to create a token to use to authenticated requests.\nNormally you would just pass in the require of the json file that google generates for you when you create a service account.\n\nSee the \"Authentication\" section for more info.\n\nIf you are using heroku or another environment where you cannot save a local file, you may just pass in an object with\n- `client_email` -- your service account's email address\n- `private_key` -- the private key found in the JSON file\n\nInternally, this uses a JWT client to generate a new auth token for your service account that is valid for 1 hour. The token will be automatically regenerated when it expires.\n\n\n#### `GoogleSpreadsheet.setAuthToken(id)`\n\nUse an already created auth token for all future requets.\n\n\n\n#### `GoogleSpreadsheet.getInfo(callback)`\n\nGet information about the spreadsheet. Calls callback passing an object that contains:\n\n- `title` - the title of the document\n- `updated` - last updated timestamp\n- `author` - auth info in an object\n  - `name` - author name\n  - `email` - author email\n- `worksheets` - an array of `SpreadsheetWorksheet` objects (see below)\n\n\n\n#### `GoogleSpreadsheet.getRows(worksheet_id, options, callback)`\n\nGet an array of row objects from the sheet.\n\n- `worksheet_id` - the index of the sheet to read from (index starts at 1)\n- `options` (optional)\n  - `start-index` - start reading from row #\n  - `max-results` - max # of rows to read at once\n  - `orderby` - column key to order by\n  - `reverse` - reverse results\n  - `query` - send a structured query for rows ([more info](https://developers.google.com/google-apps/spreadsheets/#sending_a_structured_query_for_rows))\n- `callback(err, rows)` - will be called with an array of row objects (see below)\n\n\n\n#### `GoogleSpreadsheet.addRow(worksheet_id, new_row, callback)`\n\nAdd a single row to the sheet.\n\n- `worksheet_id` - the index of the sheet to add to (index starts at 1)\n- `new_row` - key-value object to add - keys must match the header row on your sheet\n- `callback(err)` - callback called after row is added\n\n\n\n#### `GoogleSpreadsheet.getCells(options, callback)`\n\nGet an array of cell objects.\n\n- `options` (optional)\n  - `min-row` - row range min (uses #s visible on the left)\n  - `max-row` - row range max\n  - `min-col` - column range min (uses numbers, not letters!)\n  - `max-col` - column range max\n  - `return-empty` - include empty cells (boolean)\n\n\n----------------------------------\n\n### `SpreadsheetWorksheet`\n\nRepresents a single \"sheet\" from the spreadsheet. These are the different tabs/pages visible at the bottom of the Google Sheets interface.\n\nThis is a really just a wrapper to call the same functions on the spreadsheet without needing to include the worksheet id.\n\n__Properties:__\n- `id` - the ID of the sheet\n- `title` - the title (visible on the tabs in google's interface)\n- `rowCount` - number of rows\n- `colCount` - number of columns\n\n### `SpreadsheetWorksheet.getRows(options, callback)`\nSee above.\n\n### `SpreadsheetWorksheet.getCells(options, callback)`\nSee above.\n\n### `SpreadsheetWorksheet.addRow(new_row, callback)`\nSee above.\n\n----------------------------------\n\n### `SpreadsheetRow`\nRepresents a single row from a sheet.\n\nYou can treat the row as a normal javascript object. Object keys will be from the header row of your sheet, however the google API mangles the names a bit to make them simpler. It's easiest if you just use all lowercase keys to begin with.\n\n#### `SpreadsheetRow.save( callback )`\nSaves any changes made to the row's values.\n\n#### `SpreadsheetRow.del( callback )`\nDeletes the row from the sheet.\n\n----------------------------------\n\n### `SpreadsheetCell`\nRepresents a single cell from the sheet.\n\n#### `SpreadsheetCell.setValue(val, callback)`\nSet the value of the cell and save it.\n\n#### `SpreadsheetCell.del(callback)`\nClear the cell -- internally just calls `.setValue('', callback)`\n\n\n----------------------------------\n\n## Further possibilities & to-do\n\n- batch requests for cell based updates\n- modifying worksheet/spreadsheet properties\n- getting list of available spreadsheets for an authenticated user\n\n## Links\n\n- <https://developers.google.com/google-apps/spreadsheets/>\n- <https://github.com/Ajnasz/GoogleClientLogin>\n\n\n## Thanks\nThis is a fairly major rewrite of code by [samcday](https://github.com/samcday). original version [here](https://github.com/samcday/node-google-spreadsheets)\nAlso big thanks fo GoogleClientLogin for dealing with authentication.\n\n\n## License\nnode-google-spreadsheets is free and unencumbered public domain software. For more information, see the accompanying UNLICENSE file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/theoephraim/node-google-spreadsheet/issues"
  },
  "_id": "google-spreadsheet@1.0.1",
  "dist": {
    "shasum": "418fa15390531f41f4887db2548d04088677dcad"
  },
  "_from": "google-spreadsheet@",
  "_resolved": "https://registry.npmjs.org/google-spreadsheet/-/google-spreadsheet-1.0.1.tgz"
}
